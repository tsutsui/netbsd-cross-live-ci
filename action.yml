name: "netbsd-cross-live-ci"
description: "Action to test projects on NetBSD using live images and emulators"
inputs:
  release:
    description: "The NetBSD release version (e.g., 10.1)."
    required: false
    default: "10.1"
  machine:
    description: "The target machine architecture (e.g., vax, amd64)."
    required: true
  ftphost:
    description: "NetBSD FTP mirror host to fetch source and binary sets."
    required: false
    default: "cdn.NetBSD.org"
  prepare:
    description: "Command to prepare the environment (e.g., install packages) on NetBSD."
    required: false
    default: "true"
  configure:
    description: "Command to configure the the project on NetBSD."
    required: false
    default: "true"
  build:
    description: "Command to build the project on NetBSD."
    required: false
    default: "make && make install"

runs:
  using: "composite"
  steps:
    - name: Update host packages
      shell: bash
      run: |
        sudo apt-get purge firefox || true
        sudo apt-get autoremove -y
        sudo apt-get update -q
        sudo apt-get upgrade -qy
        sudo apt-get install -qy build-essential

    - uses: actions/checkout@v4

    - name: Set environment variables
      shell: bash
      run: |
        HOSTHOME=$HOME
        MACHINE=${{ inputs.machine }}
        RELEASE=${{ inputs.release }}
        FTPHOST=${{ inputs.ftphost }}
        RELEASEDIR=pub/NetBSD/NetBSD-${{ inputs.release }}
        NETBSDSRCDIR=$HOME/netbsd-src
        TOOLDIR=$NETBSDSRCDIR/tooldir.${{ inputs.machine }}
        IMAGE=$HOME/netbsd-${{ inputs.release }}-${{ inputs.machine }}.img
        PREPARE_CMD="${{ inputs.prepare }}"
        CONFIGURE_CMD="${{ inputs.configure }}"
        BUILD_CMD="${{ inputs.build }}"
        cat >> $GITHUB_ENV <<EOF
        HOSTHOME=$HOME
        MACHINE=$MACHINE
        RELEASE=$RELEASE
        FTPHOST=$FTPHOST
        RELEASEDIR=$RELEASEDIR
        NETBSDSRCDIR=$NETBSDSRCDIR
        TOOLDIR=$TOOLDIR
        IMAGE=$IMAGE
        PREPARE_CMD="$PREPARE_CMD"
        CONFIGURE_CMD="$CONFIGURE_CMD"
        BUILD_CMD="$BUILD_CMD"
        EOF

    - name: Fetch NetBSD sources and build cross toolchains
      shell: bash
      run: |
        SRCSETS="gnusrc sharesrc src syssrc"
        for SET in $SRCSETS; do
          echo "Downloading and extracting $SET.tgz..."
          curl -sSL https://$FTPHOST/$RELEASEDIR/source/sets/$SET.tgz | tar -zxf -
        done
        mv usr/src $NETBSDSRCDIR
        JOBS=4
        echo "Building NetBSD cross toolchains..."
        (cd $NETBSDSRCDIR && sh build.sh -m $MACHINE -U -u -j $JOBS -T $TOOLDIR -V MKGCC=no -V MKSHARE=no -V OBJMACHINE=1 tools)

    - name: Prepare emulator and environment
      shell: bash
      run: |
        cd $HOME
        case "${MACHINE}" in
        vax)
          echo "Installing dependencies for simh..."
          sudo apt-get install -qy libpcap-dev libpcre3-dev vde2 libsdl2-dev libsdl2-ttf-dev libedit-dev
          echo "Cloning simh repository and building emulator..."
          git clone https://github.com/open-simh/simh
          (cd simh && make TESTS=0 microvax3900)
          SSH_PORT=10020
          HOST_IP=10.0.2.2
          GUEST_IP=10.0.2.15
          SIMH_BIN=$HOME/simh/BIN/microvax3900
          SIMH_BOOT=$HOME/simh-boot-netbsd-vax
          cat >> $GITHUB_ENV <<EOF
        SSH_PORT=$SSH_PORT
        HOST_IP=$HOST_IP
        GUEST_IP=$GUEST_IP
        SIMH_BIN=$SIMH_BIN
        SIMH_BOOT=$SIMH_BOOT
        EOF
          cat > $SIMH_BOOT <<EOF
        set cpu 256m
        set nothrottle
        set rq0 ra92
        set rq1 disable
        set rq2 disable
        set rq3 disable
        set tq0 disable
        set tq1 disable
        set tq2 disable
        set tq3 disable
        attach rq0 $IMAGE
        attach xq nat:tcp=${SSH_PORT}:${GUEST_IP}:22
        expect '>>>' send 'boot dua0\r'; continue
        boot cpu
        EOF
          echo "Generated simh startup file:"
          cat $SIMH_BOOT
          ;;
        *)
          echo "Emulator setup for target architecture ${MACHINE} is not supported (yet)."
          exit 1
          ;;
        esac 

    - name: Create a NetBSD image
      shell: bash
      run: |
        sh scripts/mkliveimage.sh

    - name: Boot NetBSD on emulator and wait for multi-user mode
      shell: bash
      run: |
        echo "Booting NetBSD on the emulator..."
        case "${MACHINE}" in
        vax)
          sh scripts/start-simh.sh
          ;;
        *)
          echo "Booting NetBSD for target ${MACHINE} is not supported (yet)."
          exit 1
          ;;
        esac 

    - name: Build project in NetBSD environment
      shell: bash
      run: |
        echo "Building the project on NetBSD using the emulator..."
        ssh -p $SSH_PORT root@localhost <<EOF
        set -e	# Exit on error
        cd $GITHUB_WORKSPACE
        echo "Running preparation command..."
        $PREPARE_CMD
        echo "Running configure command..."
        $CONFIGURE_CMD
        echo "Running build command..."
        $BUILD_CMD
        EOF
